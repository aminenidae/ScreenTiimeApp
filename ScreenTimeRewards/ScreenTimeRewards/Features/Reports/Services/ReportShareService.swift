import Foundation
import SwiftUI
import UIKit

public class ReportShareService: ObservableObject {

    // MARK: - Public Methods

    public static func generateTextReport(from exportData: ExportData) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium

        var report = """
        ðŸ“Š Screen Time Rewards Report

        Child: \(exportData.child.name)
        Period: \(formatter.string(from: exportData.dateRange.start)) - \(formatter.string(from: exportData.dateRange.end))
        Generated: \(formatter.string(from: exportData.exportDate))

        ðŸ“ˆ SUMMARY
        â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
        Total Time: \(formatDuration(exportData.summary.totalTimeMinutes))
        Total Points Earned: \(exportData.summary.totalPointsEarned)
        Learning Time: \(formatDuration(exportData.summary.learningTimeMinutes))
        Reward Time: \(formatDuration(exportData.summary.rewardTimeMinutes))
        Total Sessions: \(exportData.summary.totalSessions)
        Average Session: \(exportData.summary.averageSessionMinutes) minutes
        Efficiency: \(String(format: "%.2f", exportData.summary.pointsPerMinute)) points/minute

        ðŸ“± APP BREAKDOWN
        â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
        """

        // Group apps by category
        let learningApps = exportData.detailedData.filter { $0.category == .learning }
        let rewardApps = exportData.detailedData.filter { $0.category == .reward }

        if !learningApps.isEmpty {
            report += "\nðŸŽ“ Learning Apps:\n"
            for app in learningApps.prefix(10) {
                report += "  â€¢ \(app.appName): \(formatDuration(app.totalMinutes)) (\(app.totalSessions) sessions, \(app.pointsEarned) pts)\n"
            }
        }

        if !rewardApps.isEmpty {
            report += "\nðŸŽ® Reward Apps:\n"
            for app in rewardApps.prefix(10) {
                report += "  â€¢ \(app.appName): \(formatDuration(app.totalMinutes)) (\(app.totalSessions) sessions)\n"
            }
        }

        report += "\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n"
        report += "Generated by Screen Time Rewards App"

        return report
    }

    public static func generateCSVData(from exportData: ExportData) -> String {
        var csv = "App Name,Category,Total Minutes,Sessions,Average Session (min),Points Earned,Points Per Hour,Last Used\n"

        for app in exportData.detailedData {
            let lastUsedString = app.lastUsed?.ISO8601String() ?? ""
            csv += "\"\(app.appName)\",\(app.category.rawValue),\(app.totalMinutes),\(app.totalSessions),\(app.averageSessionMinutes),\(app.pointsEarned),\(app.pointsPerHour),\(lastUsedString)\n"
        }

        return csv
    }

    public static func generateSummaryReport(from exportData: ExportData) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium

        let learningTime = exportData.summary.learningTimeMinutes
        let rewardTime = exportData.summary.rewardTimeMinutes
        let totalTime = learningTime + rewardTime

        let learningPercentage = totalTime > 0 ? Double(learningTime) / Double(totalTime) * 100 : 0
        let rewardPercentage = totalTime > 0 ? Double(rewardTime) / Double(totalTime) * 100 : 0

        return """
        ðŸ“Š \(exportData.child.name)'s Screen Time Summary

        ðŸ“… Period: \(formatter.string(from: exportData.dateRange.start)) - \(formatter.string(from: exportData.dateRange.end))

        ðŸŽ¯ Key Metrics:
        â€¢ Total Screen Time: \(formatDuration(exportData.summary.totalTimeMinutes))
        â€¢ Points Earned: \(exportData.summary.totalPointsEarned)
        â€¢ Learning vs Reward: \(String(format: "%.0f", learningPercentage))% Learning, \(String(format: "%.0f", rewardPercentage))% Reward
        â€¢ Average Session: \(exportData.summary.averageSessionMinutes) minutes

        ðŸ“ˆ Performance:
        â€¢ Efficiency: \(String(format: "%.1f", exportData.summary.pointsPerMinute)) points per minute
        â€¢ Total Sessions: \(exportData.summary.totalSessions)

        Generated by Screen Time Rewards
        """
    }

    // MARK: - Sharing Methods

    @MainActor
    public static func shareReport(
        exportData: ExportData,
        exportType: ExportType,
        from sourceView: UIView
    ) {
        let content: String
        let filename: String

        switch exportType {
        case .text:
            content = generateTextReport(from: exportData)
            filename = "screen-time-report.txt"
        case .csv:
            content = generateCSVData(from: exportData)
            filename = "screen-time-data.csv"
        case .summary:
            content = generateSummaryReport(from: exportData)
            filename = "screen-time-summary.txt"
        }

        // Create temporary file
        let tempURL = createTemporaryFile(content: content, filename: filename)

        // Present share sheet
        let activityViewController = UIActivityViewController(
            activityItems: [tempURL],
            applicationActivities: nil
        )

        // Configure for iPad
        if let popover = activityViewController.popoverPresentationController {
            popover.sourceView = sourceView
            popover.sourceRect = sourceView.bounds
        }

        // Get root view controller
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first,
           let rootViewController = window.rootViewController {
            rootViewController.present(activityViewController, animated: true)
        }
    }

    @MainActor
    public static func printReport(exportData: ExportData) {
        let printInfo = UIPrintInfo(dictionary: nil)
        printInfo.outputType = .general
        printInfo.jobName = "Screen Time Report - \(exportData.child.name)"

        let printController = UIPrintInteractionController.shared
        printController.printInfo = printInfo

        // Create formatted text for printing
        let htmlContent = generateHTMLReport(from: exportData)
        let printFormatter = UIMarkupTextPrintFormatter(markupText: htmlContent)
        printController.printFormatter = printFormatter

        printController.present(animated: true) { _, completed, error in
            if let error = error {
                print("Print error: \(error.localizedDescription)")
            }
        }
    }

    // MARK: - Helper Methods

    private static func createTemporaryFile(content: String, filename: String) -> URL {
        let tempDir = FileManager.default.temporaryDirectory
        let fileURL = tempDir.appendingPathComponent(filename)

        do {
            try content.write(to: fileURL, atomically: true, encoding: .utf8)
        } catch {
            print("Error creating temporary file: \(error.localizedDescription)")
        }

        return fileURL
    }

    private static func generateHTMLReport(from exportData: ExportData) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium

        let learningApps = exportData.detailedData.filter { $0.category == .learning }
        let rewardApps = exportData.detailedData.filter { $0.category == .reward }

        return """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>Screen Time Report</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 40px; }
                h1 { color: #007AFF; }
                h2 { color: #333; margin-top: 30px; }
                .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }
                .metric { display: inline-block; margin: 10px 20px 10px 0; }
                .metric-label { font-weight: bold; color: #666; }
                .metric-value { font-size: 18px; color: #007AFF; }
                .app-list { margin: 20px 0; }
                .app-item { padding: 8px 0; border-bottom: 1px solid #eee; }
                .app-name { font-weight: bold; }
                .app-stats { color: #666; font-size: 14px; }
                .category-learning { color: #34C759; }
                .category-reward { color: #AF52DE; }
            </style>
        </head>
        <body>
            <h1>ðŸ“Š Screen Time Report</h1>

            <div class="summary">
                <h2>Summary for \(exportData.child.name)</h2>
                <p><strong>Period:</strong> \(formatter.string(from: exportData.dateRange.start)) - \(formatter.string(from: exportData.dateRange.end))</p>

                <div class="metric">
                    <div class="metric-label">Total Time</div>
                    <div class="metric-value">\(formatDuration(exportData.summary.totalTimeMinutes))</div>
                </div>

                <div class="metric">
                    <div class="metric-label">Points Earned</div>
                    <div class="metric-value">\(exportData.summary.totalPointsEarned)</div>
                </div>

                <div class="metric">
                    <div class="metric-label">Learning Time</div>
                    <div class="metric-value">\(formatDuration(exportData.summary.learningTimeMinutes))</div>
                </div>

                <div class="metric">
                    <div class="metric-label">Reward Time</div>
                    <div class="metric-value">\(formatDuration(exportData.summary.rewardTimeMinutes))</div>
                </div>

                <div class="metric">
                    <div class="metric-label">Total Sessions</div>
                    <div class="metric-value">\(exportData.summary.totalSessions)</div>
                </div>

                <div class="metric">
                    <div class="metric-label">Efficiency</div>
                    <div class="metric-value">\(String(format: "%.2f", exportData.summary.pointsPerMinute)) pts/min</div>
                </div>
            </div>

            <h2 class="category-learning">ðŸŽ“ Learning Apps</h2>
            <div class="app-list">
                \(learningApps.map { app in
                    """
                    <div class="app-item">
                        <div class="app-name">\(app.appName)</div>
                        <div class="app-stats">\(formatDuration(app.totalMinutes)) â€¢ \(app.totalSessions) sessions â€¢ \(app.pointsEarned) points</div>
                    </div>
                    """
                }.joined())
            </div>

            <h2 class="category-reward">ðŸŽ® Reward Apps</h2>
            <div class="app-list">
                \(rewardApps.map { app in
                    """
                    <div class="app-item">
                        <div class="app-name">\(app.appName)</div>
                        <div class="app-stats">\(formatDuration(app.totalMinutes)) â€¢ \(app.totalSessions) sessions</div>
                    </div>
                    """
                }.joined())
            </div>

            <p style="margin-top: 40px; color: #666; font-size: 12px;">
                Generated on \(formatter.string(from: exportData.exportDate)) by Screen Time Rewards App
            </p>
        </body>
        </html>
        """
    }

    private static func formatDuration(_ minutes: Int) -> String {
        let hours = minutes / 60
        let remainingMinutes = minutes % 60

        if hours > 0 {
            return "\(hours)h \(remainingMinutes)m"
        } else {
            return "\(remainingMinutes)m"
        }
    }
}

// MARK: - SwiftUI Integration

public struct ShareButton: View {
    let exportData: ExportData
    @State private var showingShareSheet = false
    @State private var selectedExportType: ExportType = .text

    public init(exportData: ExportData) {
        self.exportData = exportData
    }

    public var body: some View {
        Button("Share") {
            showingShareSheet = true
        }
        .sheet(isPresented: $showingShareSheet) {
            ShareOptionsView(
                exportData: exportData,
                selectedType: $selectedExportType,
                onShare: { type in
                    // This would need to be called from a UIKit context
                    // In practice, this would be handled by the parent view
                    showingShareSheet = false
                },
                onPrint: {
                    Task { @MainActor in
                        ReportShareService.printReport(exportData: exportData)
                    }
                    showingShareSheet = false
                },
                onCancel: {
                    showingShareSheet = false
                }
            )
        }
    }
}

struct ShareOptionsView: View {
    let exportData: ExportData
    @Binding var selectedType: ExportType
    let onShare: (ExportType) -> Void
    let onPrint: () -> Void
    let onCancel: () -> Void

    var body: some View {
        NavigationView {
            VStack(spacing: 20) {
                VStack(alignment: .leading, spacing: 16) {
                    Text("Export Format")
                        .font(.headline)

                    ForEach(ExportType.allCases, id: \.self) { type in
                        ExportTypeRow(
                            type: type,
                            isSelected: selectedType == type,
                            onSelect: { selectedType = type }
                        )
                    }
                }
                .padding()

                Divider()

                VStack(spacing: 16) {
                    Button("Share Report") {
                        onShare(selectedType)
                    }
                    .buttonStyle(.borderedProminent)
                    .frame(maxWidth: .infinity)

                    Button("Print Report") {
                        onPrint()
                    }
                    .buttonStyle(.bordered)
                    .frame(maxWidth: .infinity)
                }
                .padding()

                Spacer()
            }
            .navigationTitle("Export Report")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Cancel") {
                        onCancel()
                    }
                }
            }
        }
    }
}

struct ExportTypeRow: View {
    let type: ExportType
    let isSelected: Bool
    let onSelect: () -> Void

    private var description: String {
        switch type {
        case .text:
            return "Formatted text report with full details"
        case .csv:
            return "Spreadsheet data for analysis"
        case .summary:
            return "Brief overview with key metrics"
        }
    }

    var body: some View {
        Button(action: onSelect) {
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text(type.rawValue)
                        .font(.subheadline)
                        .fontWeight(.medium)

                    Text(description)
                        .font(.caption)
                        .foregroundColor(.secondary)
                }

                Spacer()

                if isSelected {
                    Image(systemName: "checkmark.circle.fill")
                        .foregroundColor(.blue)
                }
            }
            .padding(.vertical, 8)
        }
        .buttonStyle(PlainButtonStyle())
    }
}