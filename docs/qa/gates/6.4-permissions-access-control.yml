# <!-- Powered by BMADâ„¢ Core -->
template:
  id: qa-gate-template-v1
  name: Quality Gate Decision
  version: 1.0
  output:
    format: yaml
    filename: qa.qaLocation/gates/{{epic_num}}.{{story_num}}-{{story_slug}}.yml
    title: "Quality Gate: {{epic_num}}.{{story_num}}"

# Required fields (keep these first)
schema: 1
story: "6.4"
story_title: "Permissions & Access Control"
gate: "PASS" # PASS|CONCERNS|FAIL|WAIVED
status_reason: "Implementation meets all requirements with comprehensive test coverage and proper security controls" # 1-2 sentence summary of why this gate decision
reviewer: "Quinn (Test Architect)"
updated: "2025-09-30T10:30:00Z"

# Always present but only active when WAIVED
waiver: { active: false }

# Issues (if any) - Use fixed severity: low | medium | high
top_issues: []

# Risk summary (from risk-profile task if run)
risk_summary:
  totals: { critical: 0, high: 0, medium: 0, low: 0 }
  recommendations:
    must_fix: []
    monitor: []

# Examples section using block scalars for clarity
examples:
  with_issues: |
    top_issues:
      - id: "SEC-001"
        severity: high  # ONLY: low|medium|high
        finding: "No rate limiting on login endpoint"
        suggested_action: "Add rate limiting middleware before production"
      - id: "TEST-001"  
        severity: medium
        finding: "Missing integration tests for auth flow"
        suggested_action: "Add test coverage for critical paths"

  when_waived: |
    waiver:
      active: true
      reason: "Accepted for MVP release - will address in next sprint"
      approved_by: "Product Owner"

# ============ Optional Extended Fields ============
# Uncomment and use if your team wants more detail

quality_score: 95  # 0-100 (optional scoring)
expires: "2025-10-14T10:30:00Z"  # Optional gate freshness window

evidence:
  tests_reviewed: 25
  risks_identified: 0
  trace:
    ac_covered: [1, 2, 3, 4, 5, 6]
    ac_gaps: []

nfr_validation:
  security:
    status: PASS
    notes: "Proper role-based access control implemented with appropriate permission checks"
  performance:
    status: PASS
    notes: "Efficient permission checking with minimal overhead"
  reliability:
    status: PASS
    notes: "Comprehensive error handling for unauthorized actions"
  maintainability:
    status: PASS
    notes: "Well-structured code with clear separation of concerns"

recommendations:
  immediate: []  # Must fix before production
  future:  # Can be addressed later
    - action: "Consider implementing audit logging for permission changes"
      refs: ["RewardCore/Services/PermissionService.swift"]
    - action: "Add performance monitoring for permission checks in high-volume scenarios"
      refs: ["RewardCore/Services/PermissionAwareRepositoryService.swift"]